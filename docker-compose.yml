version: '3.9'
services:
  # Postgres database
  postgres-storytelling:
    container_name: postgres-storytelling
    image: postgres:10.4
    volumes:
      - ./postgresdata:/var/lib/postgresql/data
      - ./story-backend/db/setup/dbinit.sql:/docker-entrypoint-initdb.d/dbinit.sql
    restart: always
    environment:
      POSTGRES_USER: me
      POSTGRES_PASSWORD: password
      POSTGRES_DB: stories

  # Expernal API to retrieve aggregated data of the gathered mobility data
  story-api:
    container_name: story-api
    build:
      context: .
      dockerfile: story-backend/Dockerfile
    restart: always
    depends_on:
      - postgres-storytelling
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.story-api.entrypoints=https
      - traefik.http.routers.story-api.tls=true
      - traefik.http.routers.story-api.tls.certresolver=lets-encr
      - traefik.http.routers.story-api.rule=Host(`story-api.cut.hcu-hamburg.de`)
      - traefik.http.services.story-api.loadbalancer.server.port=3000
    #ports:
    #  - '8080:8080'

  # Frontend incl. Masterportal configuration and both the storytelling and the data collection add-on
  story-frontend:
    container_name: story-frontend
    build:
      context: .
      dockerfile: Dockerfile
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.story-frontend.entrypoints=https
      - traefik.http.routers.story-frontend.tls=true
      - traefik.http.routers.story-frontend.tls.certresolver=lets-encr
      - traefik.http.routers.story-frontend.rule=Host(`republica.cut.hcu-hamburg.de`)

    #ports: // No port necessary for traefik setup
    #  - '80:80'

networks:
  proxy:
    external: true
  